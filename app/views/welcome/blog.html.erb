<body class="body">
  <div class="text content">
    <h1>ブログ作成</h1>
      <p>
        この章では、ブログを作成していきましょう。少し長くなりそうなので新しくアプリケーションを作成します。<br>
        現在、page というディレクトリにいた場合は、workspaceディレクトリまで戻りましょう。戻り方は、「cd ..」で１つ前のディレクトリまで戻れます。<br>
        それでは、新しくblogという名前のアプリケーションを作成します。<br>
        「rails new blog -d postgresql」コマンドを実行して「blog」ディレクトリに移動しましょう。<br>
        これからブログ機能を作成していきますがブログ機能で必要なのが「ブログ作成画面」「ブログ保存」「ブログ一覧画面」「ブログ詳細画面」「ブログ編集画面」
        「ブログ更新」「ブログ削除」です。
        まずは、config/routes.rbを開き下記画像のようにルーティングを記述しましょう。
        <img src="image35.png">
        次は、コントローラーの作成でしたね。<br>
        「rails g controller tweets」コマンドを実行してコントローラーを作成したらその作成した
        「tweets_controller.rb」ファイルを開き下記画像のようにアクションを記述していきましょう。
        <img src="image36.png">
        次に、モデルを作成します。<br>
        「rails g model Tweet」コマンドを実行したら、db/migrate配下にマイグレーションファイルが作成されるので開いて下記画像のように追記しましょう。<br>
        t.データ型 :カラム名<br>
        <img src="image37.png">
        string型は、短い文字列の時に使用します。
        text型は、長い文字列の時時に使用します。
        マイグレーションファイルを作成したので「rake db:migrate」コマンドを実行しましょう。
        これで、titleとcontentが保存できるtweetsテーブルが作成されました。<br>
        先にtweets_,controllerのアクションの中身がどのような記述をするか確認してみましょう。
        <img src="image38.png">
        今は、分からなくて大丈夫です。1つ1つ確認していきましょう。<br>
        それでは、ブログ一覧画面から作成するのでindexアクションから見てみましょう。
        「Tweet」はモデル名です。「.all」で全ての値を取ってくるという命令です。その取ってきた値を「@tweets」変数に格納しています。</br>
        次は、ビューファイルを作成します。
        app/views/tweets配下に「index.html.erb」を作成し下記画像のように記述しましょう。
        <img src="image39.png">
        tweets_controllerのindexアクションで指定した「@tweets」変数の中が空(blank?)だったら「ブログが存在しません」と表示されるようにしてます。
        「else」でそれ以外、つまりブログが存在していたらそのブログを表示するようにしています。<br>
        「@tweet.each do |tweet|」で「@tweets」の中にある値を1つ1つ取り出して「tweet」変数に格納しています。
        1つ1つ取り出した値が「tweet」変数の中に格納されているのでその中のタイトルと内容を表示したいので<br>
        「tweet.title」「tweet.content」と記述しています。<br>
        「<%=」と「%」で「=」が付くのと付かないのがありますがこれはブラウザに表示するかしないかです。
        タイトルと内容はブラウザに表示させたいので「<%=」付けて記述しています。
        では、サーバーを起動して「rake routes」コマンドで一覧ページのルーティングを確認して一覧ページを表示しましょう。<br>
        「ブログが存在しません」と表示できていればうまくプログラムが動いています。<br>
        それでは、コマンドでブログを保存しましょう。<br>
        「rails c」コマンドを実行し「Tweet.create(title:"titleに保存したい文字列", content:"contentに保存したい文字列")」で実装しましょう。
        <img src="image40.png">
        これで1つブログが作成できたのでブラウザで確認しましょう。<br>
        次は、実際にブログ作成画面を作成してブログを保存していきましょう。tweets_controller.rbに戻ってnewアクションを確認しましょう。
        「Tweet.new」の「.new」とは「Tweet」の中にある「title」や「content」などの空のものを「@tweet」に格納しています。
        ブログの作成画面では、ユーザーがtitle欄やcontent欄に入力したものが保存されるので、titleやcontentは空でないといけないですよね。<br>
        次に、「new.html.erb」を作成して下記画像のように記述しましょう。
        <img src="image41.png">
        作成したらブラウザで確認しましょう。入力欄ができているはずです。
        titleとcontentの欄を入力して「create tweet」ボタンを押下するとcreateアクションに飛んで保存させます。なので次は、
        tweets_controller.rbに戻ってcreateアクションを確認しましょう。<br>
        「Tweet.new(tweet_params)」の「tweet_params」とは何なのか？
        これは、保存する値を指定していて保存する値は「private」下に
        「params.require(:tweet).permit(:title, :content)」と別で記述しています。
        これは、ストロングパラメータと言ってセキュリティ対策です。保存する値をcreateアクション内に記述してしまうとセキュリティ上あまくなってしまうので
        保存する値は別で記述しています。<br>
        「if @tweet.invalid?」とは、もしバリデーションに引っかかったらと言う意味です。バリデーションは後で説明します。
          「render "new"」バリデーションに引っかかったら「new」に戻る、つまりブログの作成画面に戻ります。<br>
        「else」でそれ以外の場合、つまりバリデーションに引っかからなかった場合は<br>
          「@tweet.save」で保存して<br>
          「redirect_to tweets_path」保存した後は一覧画面に飛ばすようにしています。if文を記述した時は最後にendを忘れずに。<br>
          そして先ほどのバリデーションについてですが、
          バリデーションとは、データベースに保存される前にそのデータが正しいかどうかを検証する仕組みのことです。
          実際にバリデーションを記述してみましょう。<br>
          app/models/tweet.rbを開き下記画像のように追記しましょう。
          <img src="image42.png">
          これは、titleが未入力の場合は、contentが未入力で5文字以上、50文字以下でないと保存されないように記述しています。
          この条件にクリアした場合のみ保存されるようになります。<br>
          最後に一覧ページにブログの作成画面に遷移するリンクを作成しましょう。<br>
          次に詳細画面を作成しましょう。
          app/controllers/tweets_controller.rbに戻りshowアクションを確認しましょう。<br>
          「find」でデータベースからデータを検索して「params[:id]」でパラメータ名「id」で取得することができます。<br>
          app/views/tweets配下にshow.html.erbファイルを作成し下記画像のように記述しましょう。
          <img src="image43.png">
          次に一覧画面で詳細画面に遷移するリンクを作成しましょう。
          <img src="image44">
          titleが表示される文言に詳細へ遷移するリンクを作成しこれで詳細画面へ行き来することができました。<br>
          次に編集画面を作成ましましょう。
          app/controllers/tweets_controller.rbに戻りeditアクションを確認しましょう。
          showアクションと同じなので説明は省きます。<br>
          app/views/tweets配下に「edit.html.erb」ファイルを作成し下記画像のように記述しましょう。
          <img src=""

























      </p>
  </div>
</body>
